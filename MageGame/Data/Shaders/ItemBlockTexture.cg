#define VOXELCENTEROFFSET 0.5
#define WORLDSCALE 0.2
#define NUM_TEX_PER_ROW 4
#define TEX_WIDTH_NORMALIZED (1.0 / NUM_TEX_PER_ROW)

void itemblocktexture_vp(
	float4 inPosition			: POSITION,
	float4 inColor				: COLOR,

	out float4 outPosition  	: POSITION,
	out float4 outWorldPosition	: TEXCOORD0,
	out float4 outColor			: TEXCOORD1,

	uniform float4x4 world,
	uniform float4x4 viewProj)
{
	outWorldPosition = mul(world, inPosition);
	
	outPosition = mul(viewProj, outWorldPosition);
	
	outColor = inColor;
}

void itemblocktexture_fp(
	float4 inWorldPosition    	: TEXCOORD0,
	float4 inColor				: TEXCOORD1,

	out float4 outColor			: COLOR,

	uniform sampler2D texture)
{
	float3 worldNormal = cross(ddy(inWorldPosition.xyz / WORLDSCALE), ddx(inWorldPosition.xyz / WORLDSCALE));
	worldNormal = normalize(worldNormal);
	
	float2 pos;
	//Right
    if(worldNormal.x > 0.5)
    {
        pos.x = frac(1 - inWorldPosition.z / WORLDSCALE + VOXELCENTEROFFSET);
		pos.y = frac(1 - inWorldPosition.y / WORLDSCALE + VOXELCENTEROFFSET);
    }
	//Left
	if(worldNormal.x < -0.5)
    {
		pos.x = frac(inWorldPosition.z / WORLDSCALE + VOXELCENTEROFFSET);
		pos.y = frac(1 - inWorldPosition.y / WORLDSCALE + VOXELCENTEROFFSET);
    }
	//Top
    if(worldNormal.y > 0.5)
    {
		pos = frac(inWorldPosition.xz / WORLDSCALE + VOXELCENTEROFFSET);
    }
	//Bottom
    if(worldNormal.y < -0.5)
    {
		pos.x = frac(inWorldPosition.x / WORLDSCALE + VOXELCENTEROFFSET);
		pos.y = frac(1 - inWorldPosition.z / WORLDSCALE + VOXELCENTEROFFSET);
    }
	//Front
    if(worldNormal.z > 0.5)
    {
		pos.x = frac(inWorldPosition.x / WORLDSCALE + VOXELCENTEROFFSET);
		pos.y = frac(1 - inWorldPosition.y / WORLDSCALE + VOXELCENTEROFFSET);
    }
	//Back
    if(worldNormal.z < -0.5)
    {
        pos.x = frac(1 - inWorldPosition.x / WORLDSCALE + VOXELCENTEROFFSET);
		pos.y = frac(1 - inWorldPosition.y / WORLDSCALE + VOXELCENTEROFFSET);
    }
	
	//Texture atlas handling
	pos *= TEX_WIDTH_NORMALIZED;
	if(inColor.x != 0)
	{
		pos.x += inColor.x;
	}
	if(inColor.y != 0)
	{
		pos.y += inColor.y;
	}
	
	outColor = tex2D(texture, pos);
}