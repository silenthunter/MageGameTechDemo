#define VOXELCENTEROFFSET 0.5
#define WORLDSCALE 1.0
#define NUM_TEX_PER_ROW 6
#define NUM_TEX_PER_COL 16
#define TEX_WIDTH_NORMALIZED (1.0 / NUM_TEX_PER_ROW)
#define TEX_HEIGHT_NORMALIZED (1.0 / NUM_TEX_PER_COL)

void voxeltexture_vp(
	float4 inPosition			: POSITION,
	float4 inColor				: COLOR,

	out float4 outPosition  	: POSITION,
	out float4 outWorldPosition	: TEXCOORD0,
	out float4 outColor			: TEXCOORD1,

	uniform float4x4 world,
	uniform float4x4 viewProj)
{
	outWorldPosition = mul(world, inPosition);
	
	outPosition = mul(viewProj, outWorldPosition);
	
	outColor = inColor;
}

void voxeltexture_fp(
	float4 inWorldPosition    	: TEXCOORD0,
	float4 inColor				: TEXCOORD1,

	out float4 outColor			: COLOR,

	uniform sampler2D texture)
{
	float3 worldNormal = cross(ddy(inWorldPosition.xyz / WORLDSCALE), ddx(inWorldPosition.xyz / WORLDSCALE));
	worldNormal = normalize(worldNormal);
	
	float2 pos;
	//Right
    if(worldNormal.x > 0.5)
    {
        pos.x = frac(1 - inWorldPosition.z / WORLDSCALE + VOXELCENTEROFFSET);
		pos.y = frac(1 - inWorldPosition.y / WORLDSCALE + VOXELCENTEROFFSET);
		pos.x *= TEX_WIDTH_NORMALIZED;
		pos.x += (3 / 6.0);
    }
	//Left
	if(worldNormal.x < -0.5)
    {
		pos.x = frac(inWorldPosition.z / WORLDSCALE + VOXELCENTEROFFSET);
		pos.y = frac(1 - inWorldPosition.y / WORLDSCALE + VOXELCENTEROFFSET);
		pos.x *= TEX_WIDTH_NORMALIZED;
		pos.x += (5 / 6.0);
    }
	//Top
    if(worldNormal.y > 0.5)
    {
		pos = frac(inWorldPosition.xz / WORLDSCALE + VOXELCENTEROFFSET);
		pos.x *= TEX_WIDTH_NORMALIZED;
    }
	//Bottom
    if(worldNormal.y < -0.5)
    {
		pos.x = frac(inWorldPosition.x / WORLDSCALE + VOXELCENTEROFFSET);
		pos.y = frac(1 - inWorldPosition.z / WORLDSCALE + VOXELCENTEROFFSET);
		pos.x *= TEX_WIDTH_NORMALIZED;
		pos.x += (1 / 6.0);
    }
	//Front
    if(worldNormal.z > 0.5)
    {
		pos.x = frac(inWorldPosition.x / WORLDSCALE + VOXELCENTEROFFSET);
		pos.y = frac(1 - inWorldPosition.y / WORLDSCALE + VOXELCENTEROFFSET);
		pos.x *= TEX_WIDTH_NORMALIZED;
		pos.x += (2 / 6.0);
    }
	//Back
    if(worldNormal.z < -0.5)
    {
        pos.x = frac(1 - inWorldPosition.x / WORLDSCALE + VOXELCENTEROFFSET);
		pos.y = frac(1 - inWorldPosition.y / WORLDSCALE + VOXELCENTEROFFSET);
		pos.x *= TEX_WIDTH_NORMALIZED;
		pos.x += (4 / 6.0);
    }
	
	//Texture atlas v coordinate handling
	pos.y *= TEX_HEIGHT_NORMALIZED;
	pos.y += inColor.x;
	
	outColor = tex2D(texture, pos);
}